import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from openai_handler import generate_chatgpt_response
from profile_handler import handle_profile
from memory_handler import save_user_message
from classify_handler import classify_command
from execute_handler import execute_command
from push_code import push_to_github

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ‚úÖ –ö–æ–º–º–∞–Ω–¥—É—É–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! TenguunBot Universal –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞!")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä Auto Sync –∏–¥—ç–≤—Ö—Ç—ç–π –±–∞–π–Ω–∞!")

async def push_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöÄ –ö–æ–¥ GitHub —Ä—É—É push —Ö–∏–π–≥–¥—ç–∂ –±–∞–π–Ω–∞...")
    result = push_to_github()
    await update.message.reply_text(f"‚úÖ Push “Ø—Ä –¥“Ø–Ω:\n{result}")

async def updatebot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ôªÔ∏è Bot —à–∏–Ω—ç—á–ª—ç–≥–¥—ç–∂ –±–∞–π–Ω–∞...")
    os.system("python3 main.py &")
    await update.message.reply_text("‚úÖ Update “Ø—Ä –¥“Ø–Ω:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_text = update.message.text
    save_user_message(user_id, user_text)
    response = generate_chatgpt_response(user_text)
    await update.message.reply_text(response)

# ‚úÖ Bot —ç—Ö–ª“Ø“Ø–ª—ç—Ö
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start_command))
app.add_handler(CommandHandler("status", status_command))
app.add_handler(CommandHandler("push", push_command))
app.add_handler(CommandHandler("updatebot", updatebot_command))
app.add_handler(CommandHandler("classify", classify_command))
app.add_handler(CommandHandler("execute", execute_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()